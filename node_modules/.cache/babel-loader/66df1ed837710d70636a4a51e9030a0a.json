{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dange\\\\Desktop\\\\Proyectos VS\\\\vescis-store-react\\\\src\\\\banner-componente.js\";\nimport React, { Component, createRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Carousel extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      x: 0,\n      currentPage: 1\n    };\n    this.$carousel = /*#__PURE__*/createRef();\n\n    this.calculateSizes = () => {\n      // obtenemos la lista de elementos del DOM de los children\n      const children = this.$carousel.current.children; // obtenemos el width del elemento que representa nuestro carrusel\n\n      const pageWidth = this.$carousel.current.clientWidth;\n      const {\n        elements\n      } = Array.from(children) // convertimos a un array\n      .map(child => child.getBoundingClientRect()) // obtenemos su posición en x/y y su tamaño en width/heigh\n      .map(({\n        x,\n        width\n      }) => ({\n        start: x,\n        // guardamos x como start\n        width,\n        // guardamos el width\n        end: x + width // calculamos donde termina el elemento sumando x y width\n\n      })).reduce((result, {\n        end,\n        start,\n        width\n      }) => {\n        // calculamos la paǵina (abajo vamos a ver la explicación)\n        const page = Math.ceil((end + result.rest + this.props.leftPadding) / pageWidth); // devolvemos el resto de la página, la última página calculada y la lista de elementos con su página\n\n        return {\n          lastPage: result.lastPage !== page ? page : result.lastPage,\n          elements: result.elements.concat({\n            width,\n            start,\n            end,\n            page\n          }),\n          rest: result.lastPage !== page ? pageWidth * result.lastPage - start : result.rest\n        };\n      }, {\n        rest: 0,\n        lastPage: 1,\n        elements: []\n      } // empezamos el reduce con resto 0, página 1 y sin elementos\n      ); // devolvemos la lista de elementos\n\n      return elements;\n    };\n\n    this.move = (direction = 0) => {\n      // obtenemos los tamaños de todos los elementos la primera vez\n      // o los traemos de los que ya calculamos en this.sizes.\n      this.sizes = this.sizes || this.calculateSizes(); // obtenemos la página a la que pertenece el nuevo elemento\n\n      const {\n        page\n      } = this.sizes[this.props.focus]; // si la página no cambió no hacemos nada\n\n      if (this.state.currentPage === page) return; // obtenemos el punto de inicio del primer elemento de la página\n\n      const {\n        start\n      } = this.sizes.find(element => element.page === page); // actualizamos el estado\n\n      this.setState(state => ({\n        // guardamos la nueva página\n        currentPage: page,\n        // guardamos la nueva posición en X usando el punto de inicio menos el leftPadding\n        x: start - this.props.leftPadding < 0 ? 0 : start - this.props.leftPadding\n      }));\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // si los props cambiaron\n    if (prevProps.focus !== this.props.focus) {\n      // movemos el carrusel para la izquierda o derecha (-1 izquierda, 1 derecha)\n      // ej. está en 2 y antes estaba en 1 entonces se mueve a la derecha\n      this.move(this.props.focus - prevProps.focus);\n    }\n  }\n\n  render() {\n    // armamos nuestro objeto con los estilos que vamos a aplicar para mover el carrusel\n    const style = {\n      transition: \"transform 200ms linear\",\n      // agregamos una transición de 200ms linear a la propiedad transform\n      transform: `translateX(-${this.state.x}px)` // aplicamos un translateX en base a un valor del state llamado x\n\n    };\n    return /*#__PURE__*/_jsxDEV(this.props.component, {\n      ref: this.$carousel,\n      children: this.props.children,\n      style: style // nuestro componente custom debe soportar un prop `style` para aplicar estilos inline */}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/dange/Desktop/Proyectos VS/vescis-store-react/src/banner-componente.js"],"names":["React","Component","createRef","Carousel","state","x","currentPage","$carousel","calculateSizes","children","current","pageWidth","clientWidth","elements","Array","from","map","child","getBoundingClientRect","width","start","end","reduce","result","page","Math","ceil","rest","props","leftPadding","lastPage","concat","move","direction","sizes","focus","find","element","setState","componentDidUpdate","prevProps","render","style","transition","transform"],"mappings":"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","sourcesContent":["import React, { Component, createRef } from \"react\";\r\n\r\nclass Carousel extends Component {\r\n  state = {\r\n    x: 0,\r\n    currentPage: 1,\r\n  };\r\n\r\n  $carousel = createRef();\r\n\r\n  componentDidUpdate(prevProps) {\r\n    // si los props cambiaron\r\n    if (prevProps.focus !== this.props.focus) {\r\n      // movemos el carrusel para la izquierda o derecha (-1 izquierda, 1 derecha)\r\n      // ej. está en 2 y antes estaba en 1 entonces se mueve a la derecha\r\n      this.move(this.props.focus - prevProps.focus);\r\n    }\r\n  }\r\n\r\n  calculateSizes = () => {\r\n    // obtenemos la lista de elementos del DOM de los children\r\n    const children = this.$carousel.current.children;\r\n    // obtenemos el width del elemento que representa nuestro carrusel\r\n    const pageWidth = this.$carousel.current.clientWidth;\r\n\r\n    const { elements } = Array.from(children) // convertimos a un array\r\n      .map((child) => child.getBoundingClientRect()) // obtenemos su posición en x/y y su tamaño en width/heigh\r\n      .map(({ x, width }) => ({\r\n        start: x, // guardamos x como start\r\n        width, // guardamos el width\r\n        end: x + width, // calculamos donde termina el elemento sumando x y width\r\n      }))\r\n      .reduce(\r\n        (result, { end, start, width }) => {\r\n          // calculamos la paǵina (abajo vamos a ver la explicación)\r\n          const page = Math.ceil(\r\n            (end + result.rest + this.props.leftPadding) / pageWidth\r\n          );\r\n\r\n          // devolvemos el resto de la página, la última página calculada y la lista de elementos con su página\r\n          return {\r\n            lastPage: result.lastPage !== page ? page : result.lastPage,\r\n            elements: result.elements.concat({ width, start, end, page }),\r\n            rest:\r\n              result.lastPage !== page\r\n                ? pageWidth * result.lastPage - start\r\n                : result.rest,\r\n          };\r\n        },\r\n        { rest: 0, lastPage: 1, elements: [] } // empezamos el reduce con resto 0, página 1 y sin elementos\r\n      );\r\n\r\n    // devolvemos la lista de elementos\r\n    return elements;\r\n  };\r\n\r\n  move = (direction = 0) => {\r\n    // obtenemos los tamaños de todos los elementos la primera vez\r\n    // o los traemos de los que ya calculamos en this.sizes.\r\n    this.sizes = this.sizes || this.calculateSizes();\r\n    // obtenemos la página a la que pertenece el nuevo elemento\r\n    const { page } = this.sizes[this.props.focus];\r\n    // si la página no cambió no hacemos nada\r\n    if (this.state.currentPage === page) return;\r\n    // obtenemos el punto de inicio del primer elemento de la página\r\n    const { start } = this.sizes.find((element) => element.page === page);\r\n    // actualizamos el estado\r\n    this.setState((state) => ({\r\n      // guardamos la nueva página\r\n      currentPage: page,\r\n      // guardamos la nueva posición en X usando el punto de inicio menos el leftPadding\r\n      x:\r\n        start - this.props.leftPadding < 0 ? 0 : start - this.props.leftPadding,\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    // armamos nuestro objeto con los estilos que vamos a aplicar para mover el carrusel\r\n    const style = {\r\n      transition: \"transform 200ms linear\", // agregamos una transición de 200ms linear a la propiedad transform\r\n      transform: `translateX(-${this.state.x}px)`, // aplicamos un translateX en base a un valor del state llamado x\r\n    };\r\n\r\n    return (\r\n      <this.props.component\r\n        ref={this.$carousel}\r\n        children={this.props.children}\r\n        style={style} // nuestro componente custom debe soportar un prop `style` para aplicar estilos inline */}\r\n      />\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}